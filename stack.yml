AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for setting up a static website on AWS using S3, CloudFront, and Route 53."

Parameters:
  DomainName:
    Type: String
    Description: "The root domain name (e.g., example.com)."
  
  Subdomain:
    Type: String
    Default: "www"
    Description: "Subdomain for the site (default: www)."

  HostedZoneId:
    Type: String
    Description: "The Route 53 hosted zone ID for the domain."
    Default: ""
  
Resources:
  WebsiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${DomainName}-bucket"
      WebsiteConfiguration:
        IndexDocument: "index.html"
        ErrorDocument: "404.html"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"

  CloudFrontOAI:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${DomainName}-oac"
        Description: "OAC for CloudFront to access S3 bucket"
        SigningProtocol: "sigv4"
        SigningBehavior: "always"
        OriginAccessControlOriginType: "s3"

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: !Sub "CloudFront distribution for ${DomainName}"
        Enabled: true
        DefaultRootObject: "index.html"
        HttpVersion: http2
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref CloudFrontOAI
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: "redirect-to-https"
          AllowedMethods: ["GET", "HEAD"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: "PriceClass_100"

  Route53RootRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: HasHostedZone
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: "A"
      AliasTarget:
        HostedZoneId: "Z2FDTNDATAQYW2"  # CloudFront hosted zone ID (global)
        DNSName: !GetAtt CloudFrontDistribution.DomainName

  Route53SubdomainRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: HasHostedZone
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${Subdomain}.${DomainName}"
      Type: "A"
      AliasTarget:
        HostedZoneId: "Z2FDTNDATAQYW2"
        DNSName: !GetAtt CloudFrontDistribution.DomainName

Conditions:
  HasHostedZone: !Not [!Equals [!Ref HostedZoneId, ""]]

Outputs:
  WebsiteURL:
    Description: "URL of the static website"
    Value: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"

  CloudFrontURL:
    Description: "CloudFront distribution domain name"
    Value: !GetAtt CloudFrontDistribution.DomainName